/**
 * 
 */
package judp;

import java.io.IOException;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.concurrent.TimeUnit;

import udt.UDTClient;

/**
 * @author jinyu
 * 客户端发送
 */
public class judpClient {
  private	UDTClient client=null;
  private  final int bufSize=65535;
  private  long sumLen=0;
  private PackagetCombin pack=new PackagetCombin();
  public int dataLen=0;
   private long socketType= UDTClient.SOCKET_TYPE_STREAM; //stream or dgram
 	
  /**
   * 
        * 创建一个新的实例 judpClient.    
   *    
   * @param lcoalIP 本地IP
   * @param port   本地端口
   */
  public judpClient(String lcoalIP,int port)
  {
	  InetAddress addr = null;
	try {
		addr = InetAddress.getByName(lcoalIP);
	} catch (UnknownHostException e1) {
		
		e1.printStackTrace();
	}
	  
	  try {
		client=new UDTClient(addr,port);
	} catch (SocketException e) {
		e.printStackTrace();
	} catch (UnknownHostException e) {
	
		e.printStackTrace();
	}
	 
  }
  
  
  public judpClient()
  {
	  try {
		client=new UDTClient(null,0);
	} catch (SocketException e) {
		e.printStackTrace();
	} catch (UnknownHostException e) {
		e.printStackTrace();
	}
	  
  }
  

  public judpClient(int port)
  {
	  try {
		client=new UDTClient(null,port);
	} catch (SocketException e) {
		e.printStackTrace();
	} catch (UnknownHostException e) {
		e.printStackTrace();
	}
	 
  }
  

  
  public boolean connect(String ip,int port)
  {
	  boolean isSucess=false;
	  if(client!=null)
	  {
		  try {
			client.connect(ip, port);
			isSucess=true;
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (IOException e) {
		
			e.printStackTrace();
		}
	  }
	  
	  return isSucess;
  }
  

  public int sendData(byte[] data)
  {
	  if(data==null)
	  {
		  return 0;
	  }
	  int r=0;
	  if(client!=null)
	  {
		  try {
			 
			client.sendBlocking(data);
			r=data.length;
		    sumLen+=r;
		    
		} catch (IOException e) {
			
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	  }
	  return r;
  }
  
  /**
   * 
  * @Title: sendSplitData
  * @Description: 拆分发送
  * @param @param data
  * @param @return    参数
  * @return int    返回类型
   */
  public int sendSplitData(byte[] data)
  {
	  if(data==null)
	  {
		  return 0;
	  }
	  int r=0;
	   byte[][]sendData=null;
	    if(dataLen==0)
	    {
	    	sendData=PackagetSub.splitData(data);
	    }
	    else
	    {
	    	PackagetSub sub=new PackagetSub();
	    	sendData=sub.split(data, dataLen);
	    }
	    for(int i=0;i<sendData.length;i++)
	    {
		   r+=sendData(sendData[i]);
	    }
	return r;
	
  }
 
  
   /**
    * 
   * @Title: pauseOutput
   * @Description: 中断
   * @param     参数
   * @return void    返回类型
    */
  public void pauseOutput()
  {
      try {
        client.getOutputStream().pauseOutput();
    } catch (IOException e) {
       
        e.printStackTrace();
    }
  }
  
  /**
   * 读取数据
   * 只和split发送对应
   * @return
   */
  public byte[]  readALL()
  {
	  byte[] result=null;
	  if(client!=null)
	  {
		  byte[]  readBytes=new byte[bufSize];//接收区
		  int r=0;
		  try {
			  while(true)
			  {
				  if(client.isClose())
					{
						return null;
					}
		          r=client.getInputStream().read(readBytes);
		          if(r==-1)
		          {
		        	  result=pack.getData();
		        	  break;
		          }
		          else
		          {
		             
		        	  if(r==0)
		        	  {
		        		  try {
							TimeUnit.MILLISECONDS.sleep(100);
							
							continue;
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
		        	  }
		        	 //
		        		  byte[] buf=new byte[r];
		        		  System.arraycopy(readBytes, 0, buf, 0, r);
		        		  if(pack.addData(buf))
		        		  {
		        			  result=pack.getData();
		        			  break;
		        		  }
		        	 
		        	  
		          }
			  }
		     
		} catch (IOException e) {
		
			e.printStackTrace();
		} 
		
	  }
	  
	  return result;
  }
  
  /**
   * 
  * @Title: read
  * @Description: 读取数据到Data中
  * @param @param data
  * @param @return    参数
  * @return int    返回类型
   */
  public int read(byte[]data)
  {
	   try {
		return client.read(data);
	} catch (IOException e) {
		e.printStackTrace();
	} catch (InterruptedException e) {
		e.printStackTrace();
	}
	return -1;
  }
  
  /**
      * 关闭
   */
  public void close()
  {
	  if(client!=null)
	  {
		  if(sumLen==0)
		  {
			  if(!client.isClose())
			    client.shutdown();
		  }
		  else
		  {
			  //开始缓存
			  //SocketManager.getInstance().add(client);
			  if(!client.isClose())
					client.shutdown();
		  }
	  }
  }
  
  /**
   * 是否关闭
   * @return
   */
 public boolean isClose()
 {
	 return client.isClose();
 }
 
 /**
  * 设置是读取为主还是写入为主
  * 如果是写入为主，当读取速度慢时，数据覆盖丢失
  * 默认读取为主，还没有读取则不允许覆盖，丢掉数据，等待重复
  * islagerRead=true才有意义
  * @param isRead
  */
 public void  resetBufMaster(boolean isRead)
 {
	 try {
		client.getInputStream().resetBufMaster(isRead);
	} catch (IOException e) {
		
		e.printStackTrace();
	}
 }
 
 /**
  * 设置大数据读取
  * 默认 false
  * @param islarge
  */
 public void setLargeRead(boolean islarge)
 {
	 try {
		client.getInputStream().setLargeRead(islarge);
	} catch (IOException e) {
		
		e.printStackTrace();
	}
 }
}
